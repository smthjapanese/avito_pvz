// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/usecase/reception_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/usecase/reception_usecase.go -destination=internal/domain/usecase/mock/mock_reception_usecase.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/smthjapanese/avito_pvz/internal/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReceptionUseCase is a mock of ReceptionUseCase interface.
type MockReceptionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionUseCaseMockRecorder
	isgomock struct{}
}

// MockReceptionUseCaseMockRecorder is the mock recorder for MockReceptionUseCase.
type MockReceptionUseCaseMockRecorder struct {
	mock *MockReceptionUseCase
}

// NewMockReceptionUseCase creates a new mock instance.
func NewMockReceptionUseCase(ctrl *gomock.Controller) *MockReceptionUseCase {
	mock := &MockReceptionUseCase{ctrl: ctrl}
	mock.recorder = &MockReceptionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceptionUseCase) EXPECT() *MockReceptionUseCaseMockRecorder {
	return m.recorder
}

// CloseLastReception mocks base method.
func (m *MockReceptionUseCase) CloseLastReception(ctx context.Context, pvzID uuid.UUID) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseLastReception", ctx, pvzID)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseLastReception indicates an expected call of CloseLastReception.
func (mr *MockReceptionUseCaseMockRecorder) CloseLastReception(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLastReception", reflect.TypeOf((*MockReceptionUseCase)(nil).CloseLastReception), ctx, pvzID)
}

// Create mocks base method.
func (m *MockReceptionUseCase) Create(ctx context.Context, pvzID uuid.UUID) (*models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvzID)
	ret0, _ := ret[0].(*models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReceptionUseCaseMockRecorder) Create(ctx, pvzID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReceptionUseCase)(nil).Create), ctx, pvzID)
}
