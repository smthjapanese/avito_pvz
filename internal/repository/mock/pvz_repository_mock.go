// Code generated by MockGen. DO NOT EDIT.
// Source: ../../domain/repository/pvz_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/smthjapanese/avito_pvz/internal/domain/models"
)

// MockPVZRepository is a mock of PVZRepository interface.
type MockPVZRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepositoryMockRecorder
}

// MockPVZRepositoryMockRecorder is the mock recorder for MockPVZRepository.
type MockPVZRepositoryMockRecorder struct {
	mock *MockPVZRepository
}

// NewMockPVZRepository creates a new mock instance.
func NewMockPVZRepository(ctrl *gomock.Controller) *MockPVZRepository {
	mock := &MockPVZRepository{ctrl: ctrl}
	mock.recorder = &MockPVZRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepository) EXPECT() *MockPVZRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPVZRepository) Create(ctx context.Context, pvz *models.PVZ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPVZRepositoryMockRecorder) Create(ctx, pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPVZRepository)(nil).Create), ctx, pvz)
}

// GetAll mocks base method.
func (m *MockPVZRepository) GetAll(ctx context.Context) ([]*models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPVZRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPVZRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockPVZRepository) GetByID(ctx context.Context, id uuid.UUID) (*models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPVZRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPVZRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockPVZRepository) List(ctx context.Context, startDate, endDate *time.Time, page, limit int) ([]*models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, startDate, endDate, page, limit)
	ret0, _ := ret[0].([]*models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPVZRepositoryMockRecorder) List(ctx, startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPVZRepository)(nil).List), ctx, startDate, endDate, page, limit)
}
